plugins {
    id 'java'
}

group 'org.example'
version '1.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


jar{
    manifest {
        attributes 'Main-Class': 'net.server.Server'
        attributes 'Class-Path': new File('libs').list().findAll {
            it.endsWith('.jar') }.collect { "lib/$it" }.join(' ')
    }

}



tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
dependencies {
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile fileTree(dir: 'libs', include: [ '*.jar'])
}

def runAllatori(variant) {
    copy {
        from "$projectDir/allatori.xml"
        into "$buildDir/intermediates/classes/"
        expand(classesRoot: variant.javaCompile.destinationDir,
                androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
                classpathJars: variant.javaCompile.classpath.getAsPath(),
                logFile: "allatori-log-${variant.name}.xml")
        rename('allatori.xml', "allatori-${variant.name}.xml")
    }

    new File("${variant.javaCompile.destinationDir}-obfuscated").deleteDir()
    javaexec {
        main = 'com.allatori.Obfuscate'
        classpath = files("$rootDir/allatori/allatori.jar")
        args "$buildDir/intermediates/classes/allatori-${variant.name}.xml"
    }
    new File("${variant.javaCompile.destinationDir}").deleteDir()
    new File("${variant.javaCompile.destinationDir}-obfuscated").renameTo(new File("${variant.javaCompile.destinationDir}"))
}